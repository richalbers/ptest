------------------------------------------
AJAX Basics
	At the end of this presentation you should  be able to 
		explain what AJAX stands for and provide an overview of how it works
		list the different data formats commonly used
		know what javascript object provides AJAX functionality
		explain the difference between a synchronous and asynchronous call

------------------------------------------
Introduction
	AJAX stands for
		Asynchronous
		Javascript
		and
		XML
	AJAX allows your javascript to fetch data from a web server and update the existing page
		URL used is subject to "same origin policy"
	Data returned can be in any format
		text, html, XML, JSON
			(html, XML, and JSON are just specially-formatted text)
	AJAX functionality is encapsulated in the XMLHttpRequest object
------------------------------------------
XMLHttpRequest object
	This object allows javascript to fetch web pages
	It can make both synchronous and asynchronous fetches
		Syncronous calls "block" and are not recommended
	It's implemention varies slightly between browsers
	Object instantiation is as follows:
		[[code]]
		&nbsp;
		var xmlhttp;
		if (window.XMLHttpRequest)  // decent browser
			xmlhttp=new XMLHttpRequest();
		else // IE6, IE5
			xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");

---------------------------------------------
XMLHttpRequest Properties	
	When you make a request, the server responds with numerous messages
		The information in these responses is available via the properties of the XMLHttpRequest object
	Properties
		readyState
			0=uninitiaized, 1=loading, 2=loaded, 3=interactive, 4=complete
		status		- status code 
			200=OK, 404=page not found, etc..
		statusText	- status code as text 
			"OK", "Not Found", etc..
		responseText - response as string
		responseXML  - response as XML document
		other ie8 specific ones...

---------------------------------------------	
XMLHttpRequest Methods
	Necessary ones
		open(method, filename, [async],[username],[password[)
		send(data)
	Others
		abort()
		getResponseHeader(header)
		getAllResponseHeaders()
		setRequestHeader(header, value)
	
---------------------------------------------
XMLHttpRequest	Event Handlers
	onreadystatechange()
		This is called when an asynchronous call returns data

	other browser specific ones...
	details at: [[http://www.javascriptkit.com/jsref/ajax.shtml!http://www.javascriptkit.com/jsref/ajax.shtml]]

-----------------------------------------------
Simple synchronous example (very bad idea)
	[[code]]
		&nbsp;
		var sPageName="somefile.txt";
		var xmlhttp;
		&nbsp;
		//create and initialize html request object
		if (window.XMLHttpRequest)  // decent browser
			xmlhttp=new XMLHttpRequest();
		else  				// IE6, IE5
			xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
		&nbsp;
		//send request  and get result 
		xmlhttp.open("GET", sPageName, false);	 //false = sync
		xmlhttp.send(); 	//blocks...
		document.getElementById("divId").innerHTML=
													xmlhttp.responseText;
	
-----------------------------------------------
Simple asynchronous example 
	[[code]]
		var sPageName="somefile.txt";
		var xmlhttp;
		&nbsp;
		//create and initilaze html request object
		if (window.XMLHttpRequest)  // decent browsers
			xmlhttp=new XMLHttpRequest();
		else  						// IE6, IE5
			xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
		&nbsp;
		//set up callback
		xmlhttp.onreadystatechange=function() {
			if (xmlhttp.readyState==4 && xmlhttp.status==200)
				document.getElementById("divId").innerHTML=
														xmlhttp.responseText;
		}	
		&nbsp;
		//send request
		xmlhttp.open("GET", sPageName, true);	 //true=async
		xmlhttp.send();
------------------------------------------
Implementation
	As shown in these slides, AJAX can be implemented using plain javascript
		It requires a fair amount of code
		You need to handle some browser differences
		You need to deal with numerous low-level messages
	jQuery makes things much easier
		it has several built-in functions provide the programmer with a much easier-to-use interface
			they encapsulate (and therefore hide) all the details
	So, we'll implement AJAX functionality using jQuery, the same way all sane people do

