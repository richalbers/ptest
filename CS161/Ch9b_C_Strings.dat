------------------------------------------
Ch 9, part 2 - C Strings
	This presentation covers
		What strings and c-strings are
		And details about how to work with C-strings, including
			Initializing
			Doing I/O with
			Copying
			Comparing
	Note: Strings are covered in the next courses
------------------------------------------
string vs C-String
	strings and c-strings are both used to store words (or a sequence of characters), but are very different in how they operate internally.
	string
		A structured (composite) datatype (stores multiple characters)
		Supported by C++ (and many other languages)
		NOT supported by C
		Functions to operate on strings are defined in <string>
	C-string
		A null terminated array of characters
			The Null character has an ASCII value of 0
			The null character MUST appear in the array, as it designates where the "string" ends.
		Supported by C and C++
		Functions to operate on C-strings are defined in <cstring>

---------------------------------------------
C-String Overview
	For an array of characters to be considered a C-string, it MUST be null terminated
	A C-string is an array and can be processed just like any other array, but typically it's processed using the C-string functions (defined in <cstring>)
		strcpy - string copy 
		strcmp - string compare
		strlen - string length
		and many others...
	All the c-string functions assume there is a Null character designating the end of the string data. If it's missing, array out-of-bounds problems will occur and results are unpredictable.
----------------------------------------------
Initializing
	An "empty" (null) string can be declared and initialized in either of these ways:
	[[code]]
		char name1[10] = {'\0'};  [[desc Declares a 10 element array of characters and puts a null character (\0 is one way to write a null character) in the first element. ]]
		char name2[10] = {0}; [[desc Declares a 10 element array of characters and puts a null character in the first element.(0, when stored in a character, is called the null character)]]
		char name3[10] = ""; //the preferred way [[desc Declares a 10 element array of characters and initializes it to an empty (or null) string (an empty string is a string that has a null character (numeric 0) as the first element. ]]
		&nbsp;
	A string containing "Rich" can be created as follows:
	[[code]]
		char name4[10] = {'R', 'i', 'c', 'h', '\0'}; [[desc Declares a 10 element array of characters and initializes the first 5 characters, the last of which is the null character]]
		char name5[10] = "Rich";  //the preferred way [[desc Declares a 10 element array of characters and initializes it to the literal string &quot;Rich&quot;.  Note, literal strings have a null terminating character, to after the characters R,i,c and h, a null character is also put into the character array.<br>This ends up looking just like the previous example (name4)]]
		
------------------------------------------
I/O
	Streaming operators work on C-Strings
	[[code]]
		char name[50];
		cin >> name; [[desc Takes characters typed on the keyboard and puts them into name until a whitespace character (blank, tab, or endl) is entered. A null terminating character is added.  <br>If more than 49 characters are typed that will be a problem.]]
		cout << name;
	Using the extraction operator (>>), however, has issues:
		Spaces cannot be input, as spaces are used as delimiters with >>
		if the user enters more characters than will fit in the string, overflow occurs and other variables can be overwritten with unexpected results.
	So, there's a get function (similar to getline) for C-String
	[[code]]
		char name[50];
		cin.get(name, 50); //reads up to 49 chars [[desc Takes characters typed on the keyboard and puts them into name until an endl character is entered, or 49 characters are typed. A null terminating character is added.]] 
-------------------------------------------
Practice
	Write a program that
		declares a 20 character cstring named favoriteName and initialize it to "Spot".
		declares another 20 character cstring named petName, prompt the user to enter his pets name, and store that in petName.
		print out both names, one per line.
------------------------------------------
Copying
	You cannot use the assignment operator to put data into a c-string (except on declaration line);
	[[code]]
		char name[20]; //not initialized
		name="Rich"; //NOT ALLOWED [[desc This is an error.  You can only use the assignment operator (=) to put a literal string into a c-string variable when the c-string is declared; never later.]]
		&nbsp;
	You must instead use the strcpy function
	[[code]]
		char name[20]; //not initialized
		strcpy(name, "Rich"); [[desc strcpy copies the c-string specified by the 2nd argument into the c-string specifed by the first argument.<br>This seems backwards to most new programmers, but is likely a carryover from assembly, which has many instructions where the result is put into the first argument]]
---------------------------------------------
Comparing
	You cannot use the == operator to compare two c-strings (or any other array)
	[[code]]
		char name[20] = "Bob";
		if (name == "Bob") //NOT ALLOWED, error [[desc comparison operator (==) cannot be used on c-strings.  The compiler will flag this line as an error]]
	You must instead use strcmp
	[[code]]
		char name[20] = "Bob";
		if (strcmp(name, "Bob") == 0) //true if equal [[desc strcmp returns<br>-1 if the first string is less than the 2nd string<br>0 if the strings are equal<br>1 if the first string is greater that the 2nd string]]
-------------------------------------------
Practice
	Add code to the previous program to do the following
		display a message state wether the name entered is the same as the favorite name or not.
		print out the first character of the entered name
		print out the entered name backwards (strlen function will prove useful, as will a for loop)
-------------------------------------------
Summary
	There are two types of strings in C++
		A C-string is a null terminated array of characters
		A string is a structured (composite) datatype (an object)
	The C++ string datatype was created to make string processing easier
		It allows use of = and ==.
	But, C-strings are still very common
		C++ is a superset of C, so there are many system functions that accept a c-string as an argument.
	And when a programmer says "string", they may mean
		A literal string.  E.g. "Bob".
		A null-terminated array of characters (c-string)
		A variable of the string datatype
